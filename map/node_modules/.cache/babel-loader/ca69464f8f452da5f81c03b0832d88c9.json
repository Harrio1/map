{"ast":null,"code":"import { MapLayer } from 'react-leaflet';\nimport 'leaflet-velocity';\nimport L from 'leaflet';\nexport default class VelocityLayer extends MapLayer {\n  createLeafletElement(props) {\n    let velocityLayer = L.velocityLayer({\n      displayValues: false,\n      displayOptions: {\n        velocityType: 'Global Wind',\n        position: 'bottomleft',\n        emptyString: 'No velocity data',\n        angleConvention: 'bearingCW',\n        displayPosition: 'bottomleft',\n        displayEmptyString: 'No velocity data',\n        speedUnit: 'kt'\n      },\n      // OPTIONAL\n      minVelocity: 0,\n      // used to align color scale\n      maxVelocity: 10,\n      // used to align color scale\n      velocityScale: 0.01 // modifier for particle animations, arbitrarily defaults to 0.005\n      //colorScale: []       // define your own array of hex/rgb colors\n    });\n    this.leafletElement = velocityLayer;\n    this.loadData(props.url);\n    return this.leafletElement;\n  }\n  loadData(url) {\n    let request = fetch(url);\n    request.then(r => r.json()).then(data => {\n      if (this.leafletElement) {\n        this.leafletElement.setData(data);\n      }\n    });\n  }\n}","map":{"version":3,"names":["MapLayer","L","VelocityLayer","createLeafletElement","props","velocityLayer","displayValues","displayOptions","velocityType","position","emptyString","angleConvention","displayPosition","displayEmptyString","speedUnit","minVelocity","maxVelocity","velocityScale","leafletElement","loadData","url","request","fetch","then","r","json","data","setData"],"sources":["C:/Users/user/Documents/GitHub/map/map/src/layers/VelocityLayer.jsx"],"sourcesContent":["import { MapLayer } from 'react-leaflet';\r\nimport 'leaflet-velocity';\r\nimport L from 'leaflet';\r\n\r\nexport default class VelocityLayer extends MapLayer {\r\n  createLeafletElement (props) {\r\n    let velocityLayer = L.velocityLayer({\r\n      displayValues: false,\r\n      displayOptions: {\r\n        velocityType: 'Global Wind',\r\n        position: 'bottomleft',\r\n        emptyString: 'No velocity data',\r\n        angleConvention: 'bearingCW',\r\n        displayPosition: 'bottomleft',\r\n        displayEmptyString: 'No velocity data',\r\n        speedUnit: 'kt'\r\n      },\r\n\r\n      // OPTIONAL\r\n      minVelocity: 0,          // used to align color scale\r\n      maxVelocity: 10,         // used to align color scale\r\n      velocityScale: 0.01,    // modifier for particle animations, arbitrarily defaults to 0.005\r\n      //colorScale: []       // define your own array of hex/rgb colors\r\n    });\r\n\r\n    this.leafletElement = velocityLayer;\r\n\r\n    this.loadData(props.url);\r\n\r\n    return this.leafletElement;\r\n  }\r\n\r\n  loadData (url) {\r\n    let request = fetch(url);\r\n\r\n    request\r\n    .then(r => r.json())\r\n    .then(data => {\r\n      if (this.leafletElement) {\r\n        this.leafletElement.setData(data);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,OAAO,kBAAkB;AACzB,OAAOC,CAAC,MAAM,SAAS;AAEvB,eAAe,MAAMC,aAAa,SAASF,QAAQ,CAAC;EAClDG,oBAAoBA,CAAEC,KAAK,EAAE;IAC3B,IAAIC,aAAa,GAAGJ,CAAC,CAACI,aAAa,CAAC;MAClCC,aAAa,EAAE,KAAK;MACpBC,cAAc,EAAE;QACdC,YAAY,EAAE,aAAa;QAC3BC,QAAQ,EAAE,YAAY;QACtBC,WAAW,EAAE,kBAAkB;QAC/BC,eAAe,EAAE,WAAW;QAC5BC,eAAe,EAAE,YAAY;QAC7BC,kBAAkB,EAAE,kBAAkB;QACtCC,SAAS,EAAE;MACb,CAAC;MAED;MACAC,WAAW,EAAE,CAAC;MAAW;MACzBC,WAAW,EAAE,EAAE;MAAU;MACzBC,aAAa,EAAE,IAAI,CAAK;MACxB;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,cAAc,GAAGb,aAAa;IAEnC,IAAI,CAACc,QAAQ,CAACf,KAAK,CAACgB,GAAG,CAAC;IAExB,OAAO,IAAI,CAACF,cAAc;EAC5B;EAEAC,QAAQA,CAAEC,GAAG,EAAE;IACb,IAAIC,OAAO,GAAGC,KAAK,CAACF,GAAG,CAAC;IAExBC,OAAO,CACNE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACnBF,IAAI,CAACG,IAAI,IAAI;MACZ,IAAI,IAAI,CAACR,cAAc,EAAE;QACvB,IAAI,CAACA,cAAc,CAACS,OAAO,CAACD,IAAI,CAAC;MACnC;IACF,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}