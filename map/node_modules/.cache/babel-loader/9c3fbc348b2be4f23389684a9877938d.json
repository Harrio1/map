{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\"; // Удалите, если не используете\nimport { Marker, Popup } from \"react-leaflet\"; // Удалите, если не используете\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nvar fetchData = function fetchData(url, options) {\n  let request = fetch(url, options);\n  return request.then(r => r.json()).then(data => data.features);\n};\nexport default function GeojsonLayer({\n  url,\n  cluster\n}) {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    if (url) {\n      const abortController = new AbortController();\n      fetchData(url, {\n        signal: abortController.signal\n      }).then(data => {\n        setData(data);\n      });\n\n      // cancel fetch on component unmount\n      return () => {\n        abortController.abort();\n      };\n    }\n  }, [url]);\n  var GroupComponent = cluster ? MarkerClusterGroup : FeatureGroup;\n\n  // console.info(data);\n  // return (\n  //     <GroupComponent>\n  //       {data.map(f => (\n  //           <Marker\n  //             key={JSON.stringify(f.properties)}\n  //             position={f.geometry.coordinates.reverse()}\n  //           >\n  //             <Popup minWidth={200} closeButton={false}>\n  //               <div style={{backgroundColor:\"red\", color:\"white\"}}>\n  //                 <b>Hello</b>\n  //                 <p>I am {f.properties.name}</p>\n  //               </div>\n  //             </Popup>\n  //           </Marker>\n  //       ))}\n  //     </GroupComponent>\n  // );\n  // Удаляем маркеры, просто возвращаем null\n  return null; // Убираем отображение маркеров\n}\n_s(GeojsonLayer, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = GeojsonLayer;\nvar _c;\n$RefreshReg$(_c, \"GeojsonLayer\");","map":{"version":3,"names":["React","Marker","Popup","MarkerClusterGroup","fetchData","url","options","request","fetch","then","r","json","data","features","GeojsonLayer","cluster","_s","setData","useState","useEffect","abortController","AbortController","signal","abort","GroupComponent","FeatureGroup","_c","$RefreshReg$"],"sources":["C:/Users/user/Documents/GitHub/map/map/src/layers/GeojsonLayerFunc.jsx"],"sourcesContent":["import React from \"react\"; // Удалите, если не используете\r\nimport { Marker, Popup } from \"react-leaflet\"; // Удалите, если не используете\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\n\r\nvar fetchData = function fetchData(url, options) {\r\n  let request = fetch(url, options);\r\n\r\n  return request\r\n    .then(r => r.json())\r\n    .then(data => data.features);\r\n}\r\n\r\nexport default function GeojsonLayer ({url, cluster}) {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(()=> {\r\n    if (url) {\r\n      const abortController = new AbortController();\r\n\r\n      fetchData(url, { signal: abortController.signal }).then(data => {\r\n        setData(data);\r\n      });\r\n\r\n      // cancel fetch on component unmount\r\n      return () => {\r\n        abortController.abort();\r\n      };\r\n    }\r\n\r\n  }, [url]);\r\n\r\n  var GroupComponent = cluster ? MarkerClusterGroup : FeatureGroup;\r\n\r\n  // console.info(data);\r\n  // return (\r\n  //     <GroupComponent>\r\n  //       {data.map(f => (\r\n  //           <Marker\r\n  //             key={JSON.stringify(f.properties)}\r\n  //             position={f.geometry.coordinates.reverse()}\r\n  //           >\r\n  //             <Popup minWidth={200} closeButton={false}>\r\n  //               <div style={{backgroundColor:\"red\", color:\"white\"}}>\r\n  //                 <b>Hello</b>\r\n  //                 <p>I am {f.properties.name}</p>\r\n  //               </div>\r\n  //             </Popup>\r\n  //           </Marker>\r\n  //       ))}\r\n  //     </GroupComponent>\r\n  // );\r\n  // Удаляем маркеры, просто возвращаем null\r\n  return null; // Убираем отображение маркеров\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,SAASC,MAAM,EAAEC,KAAK,QAAQ,eAAe,CAAC,CAAC;AAC/C,OAAOC,kBAAkB,MAAM,6BAA6B;AAE5D,IAAIC,SAAS,GAAG,SAASA,SAASA,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC/C,IAAIC,OAAO,GAAGC,KAAK,CAACH,GAAG,EAAEC,OAAO,CAAC;EAEjC,OAAOC,OAAO,CACXE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACnBF,IAAI,CAACG,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC;AAChC,CAAC;AAED,eAAe,SAASC,YAAYA,CAAE;EAACT,GAAG;EAAEU;AAAO,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACJ,IAAI,EAAEK,OAAO,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAK;IACb,IAAId,GAAG,EAAE;MACP,MAAMe,eAAe,GAAG,IAAIC,eAAe,CAAC,CAAC;MAE7CjB,SAAS,CAACC,GAAG,EAAE;QAAEiB,MAAM,EAAEF,eAAe,CAACE;MAAO,CAAC,CAAC,CAACb,IAAI,CAACG,IAAI,IAAI;QAC9DK,OAAO,CAACL,IAAI,CAAC;MACf,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACXQ,eAAe,CAACG,KAAK,CAAC,CAAC;MACzB,CAAC;IACH;EAEF,CAAC,EAAE,CAAClB,GAAG,CAAC,CAAC;EAET,IAAImB,cAAc,GAAGT,OAAO,GAAGZ,kBAAkB,GAAGsB,YAAY;;EAEhE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,IAAI,CAAC,CAAC;AACf;AAACT,EAAA,CAzCuBF,YAAY;AAAAY,EAAA,GAAZZ,YAAY;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}